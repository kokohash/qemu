/// <reference types="node" />
import * as os from 'os';
import { Liquid } from 'liquidjs';
import { Logger } from '@xpack/logger';
export interface Properties {
    [key: string]: string | string[];
}
export interface XpmLiquidMap {
    /**
     * https://nodejs.org/dist/latest-v14.x/docs/api/process.html#process_process_env
     */
    env: NodeJS.ProcessEnv;
    /**
     * https://nodejs.org/dist/latest-v14.x/docs/api/os.html
     */
    os: {
        /**
         * The operating system-specific end-of-line marker.
         * - `\n` on POSIX
         * - `\r\n` on Windows
         */
        EOL: string;
        /**
         * Possible values are 'arm', 'arm64', 'ia32', 'mips', 'mipsel',
         * 'ppc', 'ppc64', 's390', 's390x', 'x32', and 'x64'.
         */
        arch: string;
        /**
         * Contains commonly used operating system-specific constants
         * for error codes, process signals, and so on. The specific
         * constants defined are described in
         * [OS constants](https://nodejs.org/dist/latest-v14.x/docs/api/os.html#os_os_constants_1)
         */
        constants: {
            signals: {
                [key: string]: number;
            };
            errno: {
                [key: string]: number;
            };
        };
        /**
         * An array of objects containing information about
         * each logical CPU core.
         */
        cpus: os.CpuInfo[];
        /**
         * A string identifying the endianness of the CPU
         * for which the Node.js binary was compiled.
         *
         * Possible values are 'BE' for big endian and 'LE' for little endian.
         */
        endianness: 'BE' | 'LE';
        /**
         * The string path of the current user's home directory.
         */
        homedir: string;
        /**
         * The host name of the operating system as a string.
         */
        hostname: string;
        /**
         * A string identifying the operating system platform.
         * Possible values are 'aix', 'darwin', 'freebsd', 'linux', 'openbsd',
         * 'sunos', and 'win32'.
         */
        platform: NodeJS.Platform;
        /**
         * The operating system as a string.
         */
        release: string;
        /**
         * Returns the operating system's default directory for
         * temporary files as a string.
         */
        tmpdir: string;
        /**
         * Returns the operating system name as returned by uname(3).
         * For example, it returns 'Linux' on Linux, 'Darwin' on macOS,
         * and 'Windows_NT' on Windows.
         */
        type: string;
        /**
         * Returns a string identifying the kernel version.
         *
         * On POSIX systems, the operating system release is determined
         * by calling `uname(3)`. On Windows, `RtlGetVersion()` is used,
         * and if it is not available, `GetVersionExW()` will be used.
         */
        version: string;
    };
    /**
     * https://nodejs.org/dist/latest-v14.x/docs/api/path.html
     */
    path: {
        /**
         * Provides the platform-specific path delimiter:
         * - `;` for Windows
         * - `:` for POSIX
         */
        delimiter: string;
        /**
         * Provides the platform-specific path segment separator:
         * - `\` on Windows
         * - `/` on POSIX
         */
        sep: string;
        win32: {
            delimiter: string;
            sep: string;
        };
        posix: {
            delimiter: string;
            sep: string;
        };
    };
    package?: any;
    configuration?: {
        name: string;
        [key: string]: any;
    };
    properties?: Properties;
}
/**
 * Replace non alphanumeric chars with dashes to make the paths
 * comply with filesystem names.
 *
 * @param {string} input A path candidate.
 * @returns {string} A validated path.
 */
export declare function filterPath(input: string): string;
/**
 * Replace non alphanumeric chars with dashes to make the paths
 * comply with Posix filesystem names.
 *
 * @param {string} input A path candidate.
 * @returns {string} A validated path.
 */
export declare function filterPosixPath(input: string): string;
/**
 * Replace non alphanumeric chars with dashes to make the paths
 * comply with Windows filesystem names.
 *
 * @param {string} input A path candidate.
 * @returns {string} A validated path.
 */
export declare function filterWin32Path(input: string): string;
export declare class XpmLiquid {
    readonly log: Logger;
    readonly engine: Liquid;
    constructor(log: Logger);
    /**
     * Return the base for a liquid map.
     *
     * @returns A map of properties.
     */
    prepareMap(packageJson: any, buildConfigurationName?: string): XpmLiquidMap;
    /**
     * Perform substitution on the input string.
     * Repeat until no more Liquid variables or tags are identified.
     *
     * @param input - The input string, possibly with substitutions.
     * @param map - The substitution map.
     * @returns The substituted string.
     *
     * @throws Liquid exceptions
     */
    performSubstitutions(input: string, map: XpmLiquidMap): Promise<string>;
}
